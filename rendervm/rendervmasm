#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long;
use Data::Dumper;
my $opts = {};
GetOptions(
    $opts,
    'input=s',
    'output=s',
    'carray',
    'cenum',
    'cswitch',
    'copcode2str',
    'ctests',
);

my %INS_ARG_LENGTH = (
    HALT                => [0x00, []],
    YIELD               => [0x01, []],
    RESET               => [0x02, []],
    CALL                => [0x03, ['uint16']],
    RETURN              => [0x04, []],
    JUMP                => [0x05, ['uint16']],
    UINT8_POP           => [0x06, ['uint8']],
    UINT8_DUP           => [0x07, ['uint8']],
    UINT8_SWAP          => [0x08, []],
    UINT8_JUMPEM        => [0x09, ['uint16']],
    UINT8_STORE         => [0x0a, []],
    UINT8_LOAD          => [0x0b, []],
    UINT8_ADD           => [0x0c, []],
    UINT8_SUB           => [0x0d, []],
    UINT8_MUL           => [0x0e, []],
    UINT8_EQ            => [0x0f, []],
    UINT8_ADDN          => [0x10, ['uint8']],
    UINT8_JUMPNZ        => [0x11, ['uint16']],
    UINT8_JUMPZ         => [0x12, ['uint16']],
    UINT8_PUSH          => [0x13, ['uint8']],
    UINT16_POP          => [0x14, ['uint8']],
    UINT16_DUP          => [0x15, ['uint8']],
    UINT16_SWAP         => [0x16, []],
    UINT16_JUMPEM       => [0x17, ['uint16']],
    UINT16_STORE        => [0x18, []],
    UINT16_LOAD         => [0x19, []],
    UINT16_ADD          => [0x1a, []],
    UINT16_SUB          => [0x1b, []],
    UINT16_MUL          => [0x1c, []],
    UINT16_EQ           => [0x1d, []],
    UINT16_ADDN         => [0x1e, ['uint16']],
    UINT16_JUMPNZ       => [0x1f, ['uint16']],
    UINT16_JUMPZ        => [0x20, ['uint16']],
    UINT16_MOVE_UINT8   => [0x21, ['uint8']],
    UINT16_PUSH         => [0x22, ['uint16']],
    UINT32_POP          => [0x23, ['uint8']],
    UINT32_DUP          => [0x24, ['uint8']],
    UINT32_SWAP         => [0x25, []],
    UINT32_JUMPEM       => [0x26, ['uint16']],
    UINT32_STORE        => [0x27, []],
    UINT32_LOAD         => [0x28, []],
    UINT32_ADD          => [0x29, []],
    UINT32_SUB          => [0x2a, []],
    UINT32_MUL          => [0x2b, []],
    UINT32_EQ           => [0x2c, []],
    UINT32_ADDN         => [0x2d, ['uint32']],
    UINT32_JUMPNZ       => [0x2e, ['uint16']],
    UINT32_JUMPZ        => [0x2f, ['uint16']],
    UINT32_MOVE_UINT8   => [0x30, ['uint8']],
    UINT32_PUSH         => [0x31, ['uint32']],
    FLOAT_POP           => [0x32, ['uint8']],
    FLOAT_DUP           => [0x33, ['uint8']],
    FLOAT_SWAP          => [0x34, []],
    FLOAT_JUMPEM        => [0x35, ['uint16']],
    FLOAT_STORE         => [0x36, []],
    FLOAT_LOAD          => [0x37, []],
    FLOAT_ADD           => [0x38, []],
    FLOAT_SUB           => [0x39, []],
    FLOAT_MUL           => [0x3a, []],
    FLOAT_EQ            => [0x3b, []],
    FLOAT_ADDN          => [0x3c, ['float']],
    FLOAT_JUMPNZ        => [0x3d, ['uint16']],
    FLOAT_JUMPZ         => [0x3e, ['uint16']],
    FLOAT_PUSH          => [0x3f, ['float']],
    VEC2_POP            => [0x40, ['uint8']],
    VEC2_DUP            => [0x41, ['uint8']],
    VEC2_SWAP           => [0x42, []],
    VEC2_JUMPEM         => [0x43, ['uint16']],
    VEC2_STORE          => [0x44, []],
    VEC2_LOAD           => [0x45, []],
    VEC2_ADD            => [0x46, []],
    VEC2_SUB            => [0x47, []],
    VEC2_MUL            => [0x48, []],
    VEC2_EQ             => [0x49, []],
    VEC2_EXPLODE        => [0x4a, []],
    VEC2_IMPLODE        => [0x4b, []],
    VEC2_MULMAT2        => [0x4c, []],
    VEC2_MULMAT3        => [0x4d, []],
    VEC2_MULMAT4        => [0x4e, []],
    VEC3_POP            => [0x4f, ['uint8']],
    VEC3_DUP            => [0x50, ['uint8']],
    VEC3_SWAP           => [0x51, []],
    VEC3_JUMPEM         => [0x52, ['uint16']],
    VEC3_STORE          => [0x53, []],
    VEC3_LOAD           => [0x54, []],
    VEC3_ADD            => [0x55, []],
    VEC3_SUB            => [0x56, []],
    VEC3_MUL            => [0x57, []],
    VEC3_EQ             => [0x58, []],
    VEC3_EXPLODE        => [0x59, []],
    VEC3_IMPLODE        => [0x5a, []],
    VEC3_MULMAT3        => [0x5b, []],
    VEC3_MULMAT4        => [0x5c, []],
    VEC4_POP            => [0x5d, ['uint8']],
    VEC4_DUP            => [0x5e, ['uint8']],
    VEC4_SWAP           => [0x5f, []],
    VEC4_JUMPEM         => [0x60, ['uint16']],
    VEC4_STORE          => [0x61, []],
    VEC4_LOAD           => [0x62, []],
    VEC4_ADD            => [0x63, []],
    VEC4_SUB            => [0x64, []],
    VEC4_MUL            => [0x65, []],
    VEC4_EQ             => [0x66, []],
    VEC4_EXPLODE        => [0x67, []],
    VEC4_IMPLODE        => [0x68, []],
    VEC4_MULMAT4        => [0x69, []],
    MAT2_POP            => [0x6a, ['uint8']],
    MAT2_DUP            => [0x6b, ['uint8']],
    MAT2_SWAP           => [0x6c, []],
    MAT2_JUMPEM         => [0x6d, ['uint16']],
    MAT2_STORE          => [0x6e, []],
    MAT2_LOAD           => [0x6f, []],
    MAT2_ADD            => [0x70, []],
    MAT2_SUB            => [0x71, []],
    MAT2_MUL            => [0x72, []],
    MAT2_EQ             => [0x73, []],
    MAT2_EXPLODE        => [0x74, []],
    MAT2_IDENT          => [0x75, []],
    MAT2_IMPLODE        => [0x76, []],
    MAT2_ROTATE         => [0x77, []],
    MAT2_SCALE          => [0x78, []],
    MAT2_TRANSP         => [0x79, []],
    MAT3_POP            => [0x7a, ['uint8']],
    MAT3_DUP            => [0x7b, ['uint8']],
    MAT3_SWAP           => [0x7c, []],
    MAT3_JUMPEM         => [0x7d, ['uint16']],
    MAT3_STORE          => [0x7e, []],
    MAT3_LOAD           => [0x7f, []],
    MAT3_ADD            => [0x80, []],
    MAT3_SUB            => [0x81, []],
    MAT3_MUL            => [0x82, []],
    MAT3_EQ             => [0x83, []],
    MAT3_EXPLODE        => [0x84, []],
    MAT3_IDENT          => [0x85, []],
    MAT3_IMPLODE        => [0x86, []],
    MAT3_ROTATE         => [0x87, []],
    MAT3_SCALE          => [0x88, []],
    MAT3_TRANSL         => [0x89, []],
    MAT3_TRANSP         => [0x8a, []],
    MAT4_POP            => [0x8b, ['uint8']],
    MAT4_DUP            => [0x8c, ['uint8']],
    MAT4_SWAP           => [0x8d, []],
    MAT4_JUMPEM         => [0x8e, ['uint16']],
    MAT4_STORE          => [0x8f, []],
    MAT4_LOAD           => [0x90, []],
    MAT4_ADD            => [0x91, []],
    MAT4_SUB            => [0x92, []],
    MAT4_MUL            => [0x93, []],
    MAT4_EQ             => [0x94, []],
    MAT4_EXPLODE        => [0x95, []],
    MAT4_IDENT          => [0x96, []],
    MAT4_IMPLODE        => [0x97, []],
    MAT4_ROTATEX        => [0x98, []],
    MAT4_ROTATEY        => [0x99, []],
    MAT4_ROTATEZ        => [0x9a, []],
    MAT4_SCALE          => [0x9b, []],
    MAT4_TRANSL         => [0x9c, []],
    MAT4_TRANSP         => [0x9d, []],
);

my %TYPEDEF = (
    'uint8' => {
        'pack' => 'C',
        'unpack' => 'b8',
        'len' => 1,
    },
    'uint16' => {
        'pack' => 'S',
        'unpack' => 'b16',
        'len' => 2,
    },
    'uint32' => {
        'pack' => 'I',
        'unpack' => 'b32',
        'len' => 4,
    },
    'float' => {
        'pack' => 'f',
        'unpack' => 'b32',
        'len' => 4,
    },
);

exit main($opts);

sub sorted_keys {
    return sort {$INS_ARG_LENGTH{$a}->[0] <=> $INS_ARG_LENGTH{$b}->[0]} keys %INS_ARG_LENGTH;
}

sub print_ctests {
    for my $ins (sorted_keys()) {
        printf("void test_opcode_$ins(test_harness_t* test, rendervm_t* vm) {\n");
        printf("    uint8_t program[] = {VM_$ins};\n");
        printf("    rendervm_exec(vm, program, 1);\n");
        printf("    rendervm_reset(vm);\n");
        printf("}\n\n");
    }
    printf("void test_all_opcodes(test_harness_t* test, rendervm_t* vm) {\n");
    for my $ins (sorted_keys()) {
        printf("test_opcode_$ins(test, vm);\n");
    }
    printf("}\n");
}

sub print_copcode2str {
    my @array;
    for my $ins (sorted_keys()) {
        my $idx = $INS_ARG_LENGTH{$ins}->[0];
        $array[$idx] = $ins;
    }

    print "const char *opcode2str[] = {\n";
    for my $ins (@array) {
        if (defined $ins) {
            print "    \"$ins\",\n";
        }
        else {
            print "    \"[unused]\",\n";
        }
    }
    print "    \"[unused]\"\n";
    print "};\n";
}

sub print_cenum {
    print "typedef enum rendervm_opcode {\n";
    for my $ins (sorted_keys()) {
        my $opcode = $INS_ARG_LENGTH{$ins}->[0];
        printf("    VM_$ins = 0x%02x,\n", $opcode);
    }
    print "    VM__INSEND = 0xff\n";
    print "} rendervm_opcode_t;\n";
}

sub print_cswitch {
    print "    switch (opcode) {\n";
    for my $ins (sorted_keys()) {
        print "        case VM_$ins:\n";
        print "            printf(\"$ins: UNIMPLEMENTED\");\n";
        print "            vm->running = 0;\n";
        print "            break;\n";
    }
    print "        default:\n";
    print "            break;\n";
    print "    }\n";
}

sub print_carray {
    my (@binary) = @_;

    my $len = scalar(@binary);
    print "    uint8_t program[$len] = {\n";
    print "        ";
    my $c = 1;
    while (scalar(@binary)) {
        my $int = shift @binary;
        printf("0x%02x", $int);
        if ($c != $len) {
            print ",";
        }
        else {
            print "\n";
        }
        if (!($c % 8)) {
            print "\n        ";
        }
        else {
            print " ";
        }
        $c++;
    }
    print "   };\n";
}

sub write_binary {
    my ($file, @binary) = @_;
    my $bin = pack("C*", @binary);
    open(my $ofh, '>:raw', $file) || die "$!";
    print $ofh $bin;
    close($ofh);
}

sub _expand_constant {
    my ($val, $type) = @_;

    my $binary = unpack($TYPEDEF{$type}->{unpack}, pack($TYPEDEF{$type}->{pack}, $val));
    my @bytes = ($binary =~ m/......../g);

    my @codes;
    for (my $i = 0; $i < $TYPEDEF{$type}->{len}; $i++) {
        push @codes, unpack('C', pack('b8', $bytes[$i]));
    }

    return @codes;
}

sub _convert_to_number {
    my ($state, $something) = @_;
    if ($something =~ /^0x[0-9a-f]+$/) {
        return hex($something);
    }
    if ($something =~ /^([0-9\.]+)f$/) {
        return $1;
    }
    if ($something =~ /^[0-9]+$/) {
        return $something;
    }
    die sprintf(
        "Invalid hex, decimal or float value: '%s' at '%s' line %d",
        $something,
        $state->{current_file},
        $state->{files}->{$state->{current_file}}->{line_count}
    );
}

sub generate_addresses {
    my ($state) = @_;
    my $addr = 0;

    # Generate addr from all the code items
    for my $code (@{$state->{prg}}) {
        $code->{addr} = $addr;
        $addr++;
        for my $arg (@{$code->{args}}) {
            $addr += $TYPEDEF{$arg->{type}}->{len};
        }
    }

    # Convert all the label array indexes into absolute addresses
    for my $label (keys %{$state->{markers}}) {
        my $idx = $state->{markers}->{$label};
        my $code = $state->{prg}->[$idx];
        my $label_addr = $code->{addr};
        $state->{markers}->{$label} = $label_addr;
    }

    # Resolve markers to addresses
    for my $code (@{$state->{prg}}) {
        for my $arg (@{$code->{args}}) {
            my $val = $arg->{val};
            my $len = $arg->{len};
            if (ref($val)) {
                if (exists $state->{markers}->{$val->{label}}) {
                    $arg->{val} = $state->{markers}->{$val->{label}};
                }
                else {
                    die sprintf(
                        "Unable to resolve label: '%s' at '%s' line %d",
                        $val->{label},
                        $val->{current_file},
                        $val->{line_count},
                    );
                }
            }
        }
    }
}

sub generate_binary {
    my ($state) = @_;

    my @binary;

    for my $code (@{$state->{prg}}) {
        my $addr = $code->{addr};
        $binary[$addr] = $code->{opcode};
        for my $arg (@{$code->{args}}) {
            my @codes = _expand_constant($arg->{val}, $arg->{type});
            for my $code (@codes) {
                $addr++;
                $binary[$addr] = $code;
            }
        }
    }

    return @binary;
}

sub decode_instruction {
    my ($state, $ins, @args) = @_;
    my $ucins = uc($ins);
    if (!exists $INS_ARG_LENGTH{$ucins}) {
        die sprintf(
            "Invalid instruction: '%s' at '%s' line %d",
            $ins,
            $state->{current_file},
            $state->{files}->{$state->{current_file}}->{line_count}
        );
    }

    my ($opcode, $types) = @{$INS_ARG_LENGTH{$ucins}};
    my $nr_args = scalar(@{$types});

    my $code = {
        opcode => $opcode,
        ucins  => $ucins,
        args   => [],
    };

    for (my $i = 0; $i < $nr_args; $i++) {
        my $type = $types->[$i];
        my $arg = $args[$i];
        if (!defined $arg) {
            die sprintf(
                "Instruction argument undefined: '%s' at '%s' line %d",
                $ins,
                $state->{current_file},
                $state->{files}->{$state->{current_file}}->{line_count}
            );
        }
        my $val;
        if (exists $state->{defs}->{$arg}) {
            push @{$code->{args}}, {
                val => $state->{defs}->{$arg},
                type => $type,
            };
        }
        elsif (exists $state->{markers}->{$arg}) {
            push @{$code->{args}}, {
                val => {
                    label        => $arg,
                    current_file => $state->{current_file},
                    line_count   => $state->{files}->{$state->{current_file}}->{line_count},
                },
                type => $type,
            };
        }
        elsif ($arg =~ /^(0x[a-zA-Z0-9]+|[0-9\.]+f?)$/) {
            push @{$code->{args}}, {
                val => _convert_to_number($state, $arg),
                type => $type,
            };
        }
        else {
            push @{$code->{args}}, {
                val => {
                    label        => $arg,
                    current_file => $state->{current_file},
                    line_count   => $state->{files}->{$state->{current_file}}->{line_count},
                },
                type => $type,
            };
        }
    }

    return $code;
}

sub compile_instruction {
    my ($state, $ins, @args) = @_;
    my $code = decode_instruction($state, $ins, @args);
    push @{$state->{prg}}, $code;
}

sub compile_line {
    my ($state, $line) = @_;

    if ($line =~ /^var\s+([A-Za-z0-9\_]+)\s+([0-9a-z]+)/) {
        $state->{defs}->{$1} = _convert_to_number($state, $2);
        return;
    }

    if ($line =~ /^([a-zA-Z\_]+):/) {
        $state->{markers}->{$1} = scalar(@{$state->{prg}}); # then next index
        return;
    }

    if ($line =~ /^\s+([^;]+)/) {
        my $command = $1;
        $command =~ s/\s+$//;
        if ($command =~ /^([a-z0-9_]+)\s*(.*)$/) {
            my ($ins, $rest) = ($1, $2);
            my @args = split(/\s+/, $rest);
            compile_instruction($state, $ins, @args);
        }
    }
}

sub load_file {
    my ($filename) = @_;
    my $program = "";
    open(my $fh, '<', $filename) || die "unable to open file $filename: $!\n";
    while (my $line = <$fh>) {
        $program .= $line;
    }
    close($fh);
    return $program;
}

sub compile_file {
    my ($state, $filename) = @_;
    my $program = load_file($filename);
    my @lines = split(/\n/, $program);
    $state->{current_file} = $filename;
    $state->{files}->{$state->{current_file}}->{line_count} = 1;
    LINE: for my $line (@lines) {
        chomp $line;
        unless ($line) {
            $state->{files}->{$state->{current_file}}->{line_count}++;
            next LINE;
        }
        compile_line($state, $line);
        $state->{files}->{$state->{current_file}}->{line_count}++;
    }
}

sub compile {
    my ($opts) = @_;

    my $state = {
        addr => 0,
        prg => [],
    };

    compile_file($state, $opts->{input});
    generate_addresses($state);

    my @binary = generate_binary($state);

    return @binary;
}

sub main {
    my ($opts) = @_;

    if ($opts->{carray}) {
        my @binary = compile($opts);
        print_carray(@binary);
    }
    elsif ($opts->{output}) {
        my @binary = compile($opts);
        write_binary($opts->{output}, @binary);
    }
    elsif ($opts->{cenum}) {
        print_cenum();
    }
    elsif ($opts->{cswitch}) {
        print_cswitch();
    }
    elsif ($opts->{copcode2str}) {
        print_copcode2str();
    }
    elsif ($opts->{ctests}) {
        print_ctests();
    }
    else {
        die "No --output=<bin> or --carray options\n";
    }
}
